// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `evtcenter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package sooh.services.evtcenter;

public abstract class _triggersDisp extends Ice.ObjectImpl implements triggers
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::sooh::services::evtcenter::triggers"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void onBuyConfirm(String data)
    {
        onBuyConfirm(data, null);
    }

    public final void onBuyRequest(String data)
    {
        onBuyRequest(data, null);
    }

    public final void onCustomEvt(String evt, String data)
    {
        onCustomEvt(evt, data, null);
    }

    public final void onLogin(String data)
    {
        onLogin(data, null);
    }

    public final void onLogout(String data)
    {
        onLogout(data, null);
    }

    public final void onRechargeConfirm(String data)
    {
        onRechargeConfirm(data, null);
    }

    public final void onRechargeRequest(String data)
    {
        onRechargeRequest(data, null);
    }

    public final void onRegister(String data)
    {
        onRegister(data, null);
    }

    public final void onWaresEnd(String data)
    {
        onWaresEnd(data, null);
    }

    public final void onWaresFull(String data)
    {
        onWaresFull(data, null);
    }

    public final void onWaresMonthly(String data)
    {
        onWaresMonthly(data, null);
    }

    public final void onWithdrawConfirm(String data)
    {
        onWithdrawConfirm(data, null);
    }

    public final void onWithdrawRequest(String data)
    {
        onWithdrawRequest(data, null);
    }

    public static Ice.DispatchStatus ___onRegister(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onRegister(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onLogout(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onLogout(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onLogin(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onLogin(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onBuyRequest(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onBuyRequest(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onBuyConfirm(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onBuyConfirm(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onRechargeRequest(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onRechargeRequest(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onRechargeConfirm(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onRechargeConfirm(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onWithdrawRequest(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onWithdrawRequest(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onWithdrawConfirm(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onWithdrawConfirm(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onWaresFull(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onWaresFull(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onWaresMonthly(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onWaresMonthly(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onWaresEnd(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String data;
        data = __is.readString();
        __inS.endReadParams();
        __obj.onWaresEnd(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___onCustomEvt(triggers __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String evt;
        String data;
        evt = __is.readString();
        data = __is.readString();
        __inS.endReadParams();
        __obj.onCustomEvt(evt, data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "onBuyConfirm",
        "onBuyRequest",
        "onCustomEvt",
        "onLogin",
        "onLogout",
        "onRechargeConfirm",
        "onRechargeRequest",
        "onRegister",
        "onWaresEnd",
        "onWaresFull",
        "onWaresMonthly",
        "onWithdrawConfirm",
        "onWithdrawRequest"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___ice_id(this, in, __current);
            }
            case 1:
            {
                return ___ice_ids(this, in, __current);
            }
            case 2:
            {
                return ___ice_isA(this, in, __current);
            }
            case 3:
            {
                return ___ice_ping(this, in, __current);
            }
            case 4:
            {
                return ___onBuyConfirm(this, in, __current);
            }
            case 5:
            {
                return ___onBuyRequest(this, in, __current);
            }
            case 6:
            {
                return ___onCustomEvt(this, in, __current);
            }
            case 7:
            {
                return ___onLogin(this, in, __current);
            }
            case 8:
            {
                return ___onLogout(this, in, __current);
            }
            case 9:
            {
                return ___onRechargeConfirm(this, in, __current);
            }
            case 10:
            {
                return ___onRechargeRequest(this, in, __current);
            }
            case 11:
            {
                return ___onRegister(this, in, __current);
            }
            case 12:
            {
                return ___onWaresEnd(this, in, __current);
            }
            case 13:
            {
                return ___onWaresFull(this, in, __current);
            }
            case 14:
            {
                return ___onWaresMonthly(this, in, __current);
            }
            case 15:
            {
                return ___onWithdrawConfirm(this, in, __current);
            }
            case 16:
            {
                return ___onWithdrawRequest(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
