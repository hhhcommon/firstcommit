<?php
// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

require_once __DIR__.'/../Ice/BuiltinSequences.php';

global $Ice__t_LogMessageType;

if(!class_exists('Ice_LogMessageType',false))
{
    class Ice_LogMessageType
    {
        const PrintMessage = 0;
        const TraceMessage = 1;
        const WarningMessage = 2;
        const ErrorMessage = 3;
    }

    $Ice__t_LogMessageType = IcePHP_defineEnum('::Ice::LogMessageType', array('PrintMessage', 0, 'TraceMessage', 1, 'WarningMessage', 2, 'ErrorMessage', 3));
}

global $Ice__t_LogMessageTypeSeq;

if(!isset($Ice__t_LogMessageTypeSeq))
{
    $Ice__t_LogMessageTypeSeq = IcePHP_defineSequence('::Ice::LogMessageTypeSeq', $Ice__t_LogMessageType);
}

global $Ice__t_LogMessage;

if(!class_exists('Ice_LogMessage',false))
{
    class Ice_LogMessage
    {
        public function __construct($type=Ice_LogMessageType::PrintMessage, $timestamp=0, $traceCategory='', $message='')
        {
            $this->type = $type;
            $this->timestamp = $timestamp;
            $this->traceCategory = $traceCategory;
            $this->message = $message;
        }

        public function __toString()
        {
            global $Ice__t_LogMessage;
            return IcePHP_stringify($this, $Ice__t_LogMessage);
        }

        public $type;
        public $timestamp;
        public $traceCategory;
        public $message;
    }

    $Ice__t_LogMessage = IcePHP_defineStruct('::Ice::LogMessage', 'Ice_LogMessage', array(
        array('type', $Ice__t_LogMessageType), 
        array('timestamp', $IcePHP__t_long), 
        array('traceCategory', $IcePHP__t_string), 
        array('message', $IcePHP__t_string)));
}

global $Ice__t_LogMessageSeq;

if(!isset($Ice__t_LogMessageSeq))
{
    $Ice__t_LogMessageSeq = IcePHP_defineSequence('::Ice::LogMessageSeq', $Ice__t_LogMessage);
}

global $Ice__t_RemoteLogger;
global $Ice__t_RemoteLoggerPrx;

if(!interface_exists('Ice_RemoteLogger',false))
{
    interface Ice_RemoteLogger extends Ice_Object
    {
        public function init($prefix, $logMessages);
        public function log($message);
    }

    class Ice_RemoteLoggerPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Ice::RemoteLogger', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Ice::RemoteLogger', $facet);
        }

        public static function ice_staticId()
        {
            return '::Ice::RemoteLogger';
        }
    }

    $Ice__t_RemoteLogger = IcePHP_defineClass('::Ice::RemoteLogger', 'Ice_RemoteLogger', -1, true, false, $Ice__t_Object, null, null);

    $Ice__t_RemoteLoggerPrx = IcePHP_defineProxy($Ice__t_RemoteLogger);

    IcePHP_defineOperation($Ice__t_RemoteLogger, 'init', 0, 0, 0, array(array($IcePHP__t_string, false, 0), array($Ice__t_LogMessageSeq, false, 0)), null, null, null);
    IcePHP_defineOperation($Ice__t_RemoteLogger, 'log', 0, 0, 0, array(array($Ice__t_LogMessage, false, 0)), null, null, null);
}

global $Ice__t_RemoteLoggerAlreadyAttachedException;

if(!class_exists('Ice_RemoteLoggerAlreadyAttachedException',false))
{
    class Ice_RemoteLoggerAlreadyAttachedException extends Ice_UserException
    {
        public function __construct()
        {
        }

        public function ice_name()
        {
            return 'Ice::RemoteLoggerAlreadyAttachedException';
        }

        public function __toString()
        {
            global $Ice__t_RemoteLoggerAlreadyAttachedException;
            return IcePHP_stringifyException($this, $Ice__t_RemoteLoggerAlreadyAttachedException);
        }
    }

    $Ice__t_RemoteLoggerAlreadyAttachedException = IcePHP_defineException('::Ice::RemoteLoggerAlreadyAttachedException', 'Ice_RemoteLoggerAlreadyAttachedException', false, null, null);
}

global $Ice__t_LoggerAdmin;
global $Ice__t_LoggerAdminPrx;

if(!interface_exists('Ice_LoggerAdmin',false))
{
    interface Ice_LoggerAdmin extends Ice_Object
    {
        public function attachRemoteLogger($prx, $messageTypes, $traceCategories, $messageMax);
        public function detachRemoteLogger($prx);
        public function getLog($messageTypes, $traceCategories, $messageMax, $prefix);
    }

    class Ice_LoggerAdminPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Ice::LoggerAdmin', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Ice::LoggerAdmin', $facet);
        }

        public static function ice_staticId()
        {
            return '::Ice::LoggerAdmin';
        }
    }

    $Ice__t_LoggerAdmin = IcePHP_defineClass('::Ice::LoggerAdmin', 'Ice_LoggerAdmin', -1, true, false, $Ice__t_Object, null, null);

    $Ice__t_LoggerAdminPrx = IcePHP_defineProxy($Ice__t_LoggerAdmin);

    IcePHP_defineOperation($Ice__t_LoggerAdmin, 'attachRemoteLogger', 0, 0, 0, array(array($Ice__t_RemoteLoggerPrx, false, 0), array($Ice__t_LogMessageTypeSeq, false, 0), array($Ice__t_StringSeq, false, 0), array($IcePHP__t_int, false, 0)), null, null, array($Ice__t_RemoteLoggerAlreadyAttachedException));
    IcePHP_defineOperation($Ice__t_LoggerAdmin, 'detachRemoteLogger', 0, 0, 0, array(array($Ice__t_RemoteLoggerPrx, false, 0)), null, array($IcePHP__t_bool, false, 0), null);
    IcePHP_defineOperation($Ice__t_LoggerAdmin, 'getLog', 0, 0, 0, array(array($Ice__t_LogMessageTypeSeq, false, 0), array($Ice__t_StringSeq, false, 0), array($IcePHP__t_int, false, 0)), array(array($IcePHP__t_string, false, 0)), array($Ice__t_LogMessageSeq, false, 0), null);
}
?>
